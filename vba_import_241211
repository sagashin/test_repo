Sub ImportDataFromExternalFiles()
    Dim wbSource As Workbook, wbTarget As Workbook
    Dim wsImport As Worksheet, wsTarget As Worksheet
    
    Dim executeFlag As String
    Dim sourceFolder As String, sourcePattern As String, foundFile As String
    Dim sourceBookName As String, sourceSheet As String, sourceCells As String
    Dim targetSheetName As String, targetRange As String
    
    Dim lastRow As Long, i As Long
    Dim targetSheetExists As Boolean
    
    ' マクロはPERSONAL.XLSBなどに格納可
    ' 実行時にアクティブなブックに"Import"シートが存在し、上記列構成でデータがある前提
    Set wsImport = ActiveWorkbook.Sheets("Import")
    Set wbTarget = ActiveWorkbook
    
    ' Importシートのデータがどこまであるか確認（B列はパスが入るのでB列基準）
    lastRow = wsImport.Cells(wsImport.Rows.Count, "B").End(xlUp).Row
    
    For i = 2 To lastRow ' 1行目はタイトル行と仮定、2行目から処理
        ' 実行フラグチェック(A列)
        executeFlag = wsImport.Cells(i, "A").Value
        If LCase(executeFlag) <> "yes" And LCase(executeFlag) <> "run" Then
            GoTo NextIteration
        End If
        
        sourceFolder = wsImport.Cells(i, "B").Value ' フォルダパス
        sourcePattern = wsImport.Cells(i, "C").Value ' ブック名ワイルドカードパターン
        sourceSheet = wsImport.Cells(i, "E").Value   ' コピー元シート名
        sourceCells = wsImport.Cells(i, "F").Value   ' コピー元セル範囲
        targetSheetName = wsImport.Cells(i, "G").Value ' 取り込み先シート名
        targetRange = wsImport.Cells(i, "H").Value     ' 貼り付け先セル範囲
        
        ' 必要情報がなければスキップ
        If sourceFolder = "" Or sourcePattern = "" Or sourceSheet = "" Or _
           sourceCells = "" Or targetSheetName = "" Or targetRange = "" Then
            GoTo NextIteration
        End If
        
        ' Dirでワイルドカード検索
        ' sourceFolderは"C:\Data\"のような形を想定
        foundFile = Dir(sourceFolder & sourcePattern)
        
        ' ファイルが見つからなければ次へ
        If foundFile = "" Then
            MsgBox "No file found matching pattern: " & sourcePattern & vbCrLf & "In folder: " & sourceFolder, vbExclamation
            GoTo NextIteration
        End If
        
        ' 見つかったファイル名をD列に書き込み
        wsImport.Cells(i, "D").Value = foundFile
        sourceBookName = foundFile
        
        ' ターゲットシート確認
        targetSheetExists = False
        For Each wsTarget In wbTarget.Sheets
            If wsTarget.Name = targetSheetName Then
                targetSheetExists = True
                Exit For
            End If
        Next wsTarget
        
        ' シートが存在しない場合は作成
        If Not targetSheetExists Then
            Set wsTarget = wbTarget.Sheets.Add(After:=wbTarget.Sheets(wbTarget.Sheets.Count))
            wsTarget.Name = targetSheetName
        Else
            Set wsTarget = wbTarget.Sheets(targetSheetName)
        End If
        
        ' コピー元ブックを開く
        On Error Resume Next
        Set wbSource = Workbooks.Open(sourceFolder & sourceBookName)
        If wbSource Is Nothing Then
            MsgBox "Failed to open source workbook: " & sourceFolder & sourceBookName, vbExclamation
            GoTo NextIteration
        End If
        On Error GoTo 0
        
        ' コピー元シートとセル範囲からコピー
        On Error Resume Next
        wbSource.Worksheets(sourceSheet).Range(sourceCells).Copy
        If Err.Number <> 0 Then
            MsgBox "Failed to copy from: " & sourceSheet & "!" & sourceCells & vbCrLf & "In workbook: " & sourceBookName, vbExclamation
            wbSource.Close False
            On Error GoTo 0
            GoTo NextIteration
        End If
        On Error GoTo 0
        
        ' 貼り付け
        wsTarget.Range(targetRange).PasteSpecial xlPasteValues
        
        ' コピー元ブックを閉じる
        wbSource.Close False
        
        ' 完了ステータスの更新(I, J列)
        wsImport.Cells(i, "I").Value = "Done"
        wsImport.Cells(i, "J").Value = Now
        
NextIteration:
    Next i
    
    MsgBox "データのインポートが完了しました。", vbInformation
End Sub

' 注意点：
' 1. A列で"Yes"/"Run"なら実行、そうでない行はスキップ。
' 2. B列にフォルダパス、C列にブック名のワイルドカードパターンを記入(例: "*.xlsx")。
' 3. マッチするファイルが見つかったらD列に実ファイル名を書き込み。
' 4. E列でコピー元シート名、F列でコピー元セル範囲、G列でターゲットシート名、H列で貼り付け先セル範囲を指定。
' 5. I列、J列に完了ステータスと日時が記録される。



VBAマクロ: データを他のブックから指定されたシート（ワイルドカード指定）とセルにコピペ
' Importシートに管理されているパス、ワイルドカードパターン、セル範囲に基づく
' A列で実行フラグを管理、C列にワイルドカードパターンを入れ、D列に実行時に確定したシート名を入れる

Sub ImportDataFromExternalFiles()
    Dim wbSource As Workbook, wbTarget As Workbook
    Dim wsImport As Worksheet, wsTarget As Worksheet
    Dim ws As Worksheet
    
    Dim executeFlag As String
    Dim sourcePath As String, sourcePattern As String, sourceSheet As String, sourceCells As String
    Dim targetSheetName As String, targetRange As String
    
    Dim lastRow As Long, i As Long
    Dim targetSheetExists As Boolean
    
    ' マクロはPERSONAL.XLSBに格納可能
    ' 実行時にアクティブなブック（Importシートを持つブック）を参照
    Set wsImport = ActiveWorkbook.Sheets("Import")
    Set wbTarget = ActiveWorkbook
    
    ' Importシートのデータがどこまであるか確認
    lastRow = wsImport.Cells(wsImport.Rows.Count, "B").End(xlUp).Row  ' B列はパスが入る列なのでそれを基準
    
    ' Importシートのデータをループして処理
    For i = 2 To lastRow ' 1行目はタイトルのため2行目から開始
        
        ' 実行フラグ(A列)
        executeFlag = wsImport.Cells(i, "A").Value
        If LCase(executeFlag) <> "yes" And LCase(executeFlag) <> "run" Then
            ' 実行フラグがYes/Runでなければスキップ
            GoTo NextIteration
        End If
        
        sourcePath = wsImport.Cells(i, "B").Value ' 別ブックのパス
        sourcePattern = wsImport.Cells(i, "C").Value ' コピー元シート名のワイルドカードパターン
        sourceCells = wsImport.Cells(i, "E").Value ' コピー元セル範囲
        targetSheetName = wsImport.Cells(i, "F").Value ' 取り込み先シート名
        targetRange = wsImport.Cells(i, "G").Value ' コピー先のセル範囲
        
        ' 必要な情報が揃っていなければスキップ
        If sourcePath = "" Or sourcePattern = "" Or sourceCells = "" Or targetSheetName = "" Or targetRange = "" Then
            GoTo NextIteration
        End If
        
        ' 取り込み先のシートが存在するか確認
        targetSheetExists = False
        For Each wsTarget In wbTarget.Sheets
            If wsTarget.Name = targetSheetName Then
                targetSheetExists = True
                Exit For
            End If
        Next wsTarget
        
        ' シートが存在しない場合は作成する
        If Not targetSheetExists Then
            Set wsTarget = wbTarget.Sheets.Add(After:=wbTarget.Sheets(wbTarget.Sheets.Count))
            wsTarget.Name = targetSheetName
        Else
            Set wsTarget = wbTarget.Sheets(targetSheetName)
        End If
        
        ' コピー元ブックを開く
        On Error Resume Next
        Set wbSource = Workbooks.Open(sourcePath)
        If wbSource Is Nothing Then
            MsgBox "Failed to open source workbook: " & sourcePath, vbExclamation
            GoTo NextIteration
        End If
        On Error GoTo 0
        
        ' ワイルドカードパターンに合うシートを探す
        sourceSheet = ""
        For Each ws In wbSource.Worksheets
            If ws.Name Like sourcePattern Then
                sourceSheet = ws.Name
                Exit For
            End If
        Next ws
        
        ' 該当するシートが見つからなければスキップ
        If sourceSheet = "" Then
            MsgBox "No sheet found matching pattern: " & sourcePattern & vbCrLf & "In workbook: " & sourcePath, vbExclamation
            wbSource.Close False
            GoTo NextIteration
        End If
        
        ' 見つかった実際のシート名をD列に書き込み
        wsImport.Cells(i, "D").Value = sourceSheet
        
        ' コピー元データを指定範囲からコピーして貼り付け
        wbSource.Worksheets(sourceSheet).Range(sourceCells).Copy
        wsTarget.Range(targetRange).PasteSpecial xlPasteValues
        
        ' コピー元ブックを閉じる
        wbSource.Close False
        
        ' 取り込みが完了したらImportシートにDoneと日付を記録(H列, I列)
        wsImport.Cells(i, "H").Value = "Done"
        wsImport.Cells(i, "I").Value = Now
        
NextIteration:
    Next i
    
    MsgBox "データのインポートが完了しました。", vbInformation
End Sub

' 注意点：
' 1. このマクロはPERSONAL.XLSBに格納可能
' 2. 実行時にアクティブなブックに"Import"シートが存在し、以下の構成で管理
'    A列: 実行フラグ ("Yes"/"Run"で実行, その他でスキップ)
'    B列: コピー元のブックのパス
'    C列: コピー元シート名ワイルドカードパターン (例: "*Data")
'    D列: 実際のコピー元シート名(実行時に特定して書き込まれる)
'    E列: コピー元セル範囲 (例: A1:D10)
'    F列: 取り込み先シート名
'    G列: 貼り付け先セル範囲 (例: A1)
'    H列: 完了ステータス ("Done")
'    I列: 完了日時
' 3. sourcePathでブックを開き、C列のパターンと一致するシートを探してD列に書き込む
' 4. シート名が見つからなければ処理スキップ
' 5. Done後にH/I列を更新



' VBAマクロ: データを他のブックから指定されたシートとセルにコピペ
' Importシートに管理されているパス、シート名、セル範囲に基づく
' H列で実行可否を管理（"Yes"なら実行、空白や"No"ならスキップ）

Sub ImportDataFromExternalFiles()
    Dim wbSource As Workbook, wbTarget As Workbook
    Dim wsImport As Worksheet, wsTarget As Worksheet
    Dim targetSheetName As String
    Dim sourcePath As String, targetRange As String
    Dim lastRow As Long, i As Long
    Dim targetSheetExists As Boolean
    Dim sourceSheet As String, sourceCells As String
    Dim executeFlag As String
    
    ' マクロはPERSONAL.XLSBなどに置き、実行時アクティブなブックをターゲットとする
    Set wsImport = ActiveWorkbook.Sheets("Import")
    Set wbTarget = ActiveWorkbook
    
    ' Importシートのデータがどこまであるか確認
    lastRow = wsImport.Cells(wsImport.Rows.Count, "A").End(xlUp).Row
    
    ' Importシートのデータをループして処理
    For i = 2 To lastRow ' 1行目はタイトルのため2行目から開始
        
        ' 実行フラグ確認 (H列)
        executeFlag = wsImport.Cells(i, "H").Value
        If LCase(executeFlag) <> "yes" And LCase(executeFlag) <> "run" Then
            ' "Yes"でも"Run"でもない場合スキップ
            GoTo NextIteration
        End If
        
        sourcePath = wsImport.Cells(i, "A").Value ' 別ブックのパス
        sourceSheet = wsImport.Cells(i, "B").Value ' コピー元シート名
        sourceCells = wsImport.Cells(i, "C").Value ' コピー元セル範囲 (例: A1:D10)
        targetSheetName = wsImport.Cells(i, "D").Value ' 取り込み先シート名
        targetRange = wsImport.Cells(i, "E").Value ' コピー先のセル範囲
        
        ' パスが空白ならスキップ
        If sourcePath = "" Then GoTo NextIteration
        ' 必要な情報が揃っていない場合スキップ
        If sourceSheet = "" Or sourceCells = "" Or targetSheetName = "" Or targetRange = "" Then GoTo NextIteration
        
        ' 取り込み先のシートが存在するか確認
        targetSheetExists = False
        For Each wsTarget In wbTarget.Sheets
            If wsTarget.Name = targetSheetName Then
                targetSheetExists = True
                Exit For
            End If
        Next wsTarget
        
        ' シートが存在しない場合は作成する
        If Not targetSheetExists Then
            Set wsTarget = wbTarget.Sheets.Add(After:=wbTarget.Sheets(wbTarget.Sheets.Count))
            wsTarget.Name = targetSheetName
        Else
            Set wsTarget = wbTarget.Sheets(targetSheetName)
        End If
        
        ' コピー元ブックを開く
        On Error Resume Next
        Set wbSource = Workbooks.Open(sourcePath)
        If wbSource Is Nothing Then
            MsgBox "Failed to open source workbook: " & sourcePath, vbExclamation
            GoTo NextIteration
        End If
        On Error GoTo 0
        
        ' コピー元データを指定範囲からコピーして貼り付け
        wbSource.Worksheets(sourceSheet).Range(sourceCells).Copy
        wsTarget.Range(targetRange).PasteSpecial xlPasteValues
        
        ' コピー元ブックを閉じる
        wbSource.Close False
        
        ' 取り込みが完了したらImportシートにDoneと日付を記録
        wsImport.Cells(i, "F").Value = "Done"
        wsImport.Cells(i, "G").Value = Now
        
NextIteration:
    Next i
    
    MsgBox "データのインポートが完了しました。", vbInformation
End Sub

' 注意点：
' 1. このマクロはPERSONAL.XLSBに格納したままでOK
' 2. 実行時にアクティブなブックに"Import"シートが存在し、H列に"Yes"または"Run"と記載された行だけ実行される
' 3. "Yes"または"Run"でない行はスキップされるため、実行したくない行はH列を空欄または"No"などにする
' 4. Importシートのその他の列構成は以前と同様



' VBAマクロ: データを他のブックから指定されたシートとセルにコピペ
' Importシートに管理されているパス、シート名、セル範囲に基づく

Sub ImportDataFromExternalFiles()
    Dim wbSource As Workbook, wbTarget As Workbook
    Dim wsImport As Worksheet, wsTarget As Worksheet
    Dim targetSheetName As String
    Dim sourcePath As String, targetRange As String
    Dim lastRow As Long, i As Long
    Dim targetSheetExists As Boolean
    Dim sourceSheet As String, sourceCells As String
    
    ' マクロはPERSONAL.XLSBに置いておくことが可能
    ' 以下でActiveWorkbookのImportシートを参照するため、
    ' 実行時にアクティブなブックに"Import"シートが必要
    Set wsImport = ActiveWorkbook.Sheets("Import")
    Set wbTarget = ActiveWorkbook
    
    ' Importシートのデータがどこまであるか確認
    lastRow = wsImport.Cells(wsImport.Rows.Count, "A").End(xlUp).Row
    
    ' Importシートのデータをループして処理
    For i = 2 To lastRow ' 1行目はタイトルのため2行目から開始
        sourcePath = wsImport.Cells(i, "A").Value ' 別ブックのパス
        sourceSheet = wsImport.Cells(i, "B").Value ' コピー元シート名
        sourceCells = wsImport.Cells(i, "C").Value ' コピー元セル範囲 (例: A1:D10)
        targetSheetName = wsImport.Cells(i, "D").Value ' 取り込み先シート名
        targetRange = wsImport.Cells(i, "E").Value ' コピー先のセル範囲
        
        ' パスが空白なら次へ
        If sourcePath = "" Then GoTo NextIteration
        If sourceSheet = "" Or sourceCells = "" Then GoTo NextIteration
        If targetSheetName = "" Or targetRange = "" Then GoTo NextIteration
        
        ' 取り込み先のシートが存在するか確認
        targetSheetExists = False
        For Each wsTarget In wbTarget.Sheets
            If wsTarget.Name = targetSheetName Then
                targetSheetExists = True
                Exit For
            End If
        Next wsTarget
        
        ' シートが存在しない場合は作成する
        If Not targetSheetExists Then
            Set wsTarget = wbTarget.Sheets.Add(After:=wbTarget.Sheets(wbTarget.Sheets.Count))
            wsTarget.Name = targetSheetName
        Else
            Set wsTarget = wbTarget.Sheets(targetSheetName)
        End If
        
        ' コピー元ブックを開く
        On Error Resume Next
        Set wbSource = Workbooks.Open(sourcePath)
        If wbSource Is Nothing Then
            MsgBox "Failed to open source workbook: " & sourcePath, vbExclamation
            GoTo NextIteration
        End If
        On Error GoTo 0
        
        ' コピー元データを指定範囲からコピーして貼り付け
        wbSource.Worksheets(sourceSheet).Range(sourceCells).Copy
        wsTarget.Range(targetRange).PasteSpecial xlPasteValues
        
        ' コピー元ブックを閉じる
        wbSource.Close False
        
        ' 取り込みが完了したらImportシートにDoneと日付を記録
        wsImport.Cells(i, "F").Value = "Done"
        wsImport.Cells(i, "G").Value = Now
        
NextIteration:
    Next i
    
    MsgBox "データのインポートが完了しました。", vbInformation
End Sub

' 注意点：
' 1. このマクロはPERSONAL.XLSBに格納可能だが、実行時にアクティブなブックに"Import"シートが存在することが前提。
' 2. Importシートの構成:
'    - A列: コピー元のブックのパス
'    - B列: コピー元シート名
'    - C列: コピー元セル範囲 (例: A1:D10)
'    - D列: 取り込み先シート名
'    - E列: 貼り付け先セル範囲 (例: A1)
'    - F列: 完了ステータス ("Done")
'    - G列: 完了日時
' 3. 新しいシートが自動で作成され、右端に追加されます。
' 4. 開けないブックがある場合は警告が表示され、次の処理に進みます。
