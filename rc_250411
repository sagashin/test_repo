#install.packages("Distributacalcul")
#install.packages("devtools")
#devtools::install_github("alec42/Distributacalcul_Package")

library(ggplot2)        
library(evir)           
library(fitdistrplus)   
library(dplyr)          
library(ismev)
library(readxl)
library(ChainLadder)
library(tidyverse)
library(writexl)
library(actuar)
library(Distributacalcul)


# ===============================
# 市場ロスデータの読み込み
# ===============================
warehouse_path <- "C:/Users/ssagara/OneDrive - American International Group, Inc/個人賠償_unlimited_こども保険/From Product team/倉庫火災データ"
warehouse_filename <- "倉庫火災データ for PML Simulation - revised.xlsx"
warehouse_fullpath <- file.path(warehouse_path, warehouse_filename)
df_warehouse_0 <- read_excel(
  path = warehouse_fullpath,
  sheet = "倉庫"
)
# ===============================
# 実績ロスデータの読み込み
# ===============================
setwd("C:/Users/ssagara/OneDrive - American International Group, Inc/個人賠償_unlimited_こども保険")
df_clm <- read_excel("CLM_LIAB_SCHOOL.xlsx")
loss_actual <- df_clm$LOSS

df_warehouse <- df_warehouse_0 %>% 
  filter(category == "倉庫") %>%
  #filter(category == "倉庫", `建物焼損床面積（㎡）` > 10000) %>%
  #filter(`建物焼損床面積（㎡）` > 10000) %>% 
  select(火災発生年, category, `損害額（百万円）`, `推定損害額１（百万円）`, `推定損害額２（百万円）`) %>% 
  mutate(loss = `損害額（百万円）`,
         loss_est1 = `推定損害額１（百万円）` ,
         loss_est2 = `推定損害額２（百万円）` 
  )

###
graph_title <- "リスクカーブ：倉庫火災&その他全件・焼損床面積全件・損害額"
loss_market <- df_warehouse$loss
#summary(loss_market)
# ===============================
# 閾値探索（MEPプロット）
# ===============================
meplot(data = loss_market)
meplot(data = loss_market, xlim = c(0, 400))
# Threshold
u_market <- 400

# ===============================
# GPDでモデリング
# ===============================
gpd_fit_market <- gpd(loss_market, threshold = u_market, method = "ml")

# ===============================
# 検定
# ===============================
#par(mfrow=c(2,2))
#plot(gpd_fit_market)  
par(mfrow=c(1,1))

# ===============================
# 発生率など
# 年間発生率
# 発生割合
# 閾値超過率
# 倉庫火災は年間およそ２件発生し、子供が関与する場合と閾値を超過する割合を組み合わせる
# ===============================
T_market <- 17  
n_exceed_market <- sum(loss_market > u_market)
lambda_market <- n_exceed_market / T_market

# 発生割合：不審火 * 子供が関与 * unlimited CPL
#market_rate <- 0.00075276
# 子供が関与を10％とした
market_rate <- 0.00015055

lambda_effective <- lambda_market * market_rate

# 全年度閾値超過確率
p_u_market <- n_exceed_market / length(loss_market)


# リスクカーブを計算
quantile_market <- function(RP, u, sigma, xi, lambda_eff, p_u) {
  annual_rate <- lambda_eff * p_u  # 年間の大口事故発生頻度
  if (abs(xi) > 1e-6) {
    q <- (u + (sigma/xi)*((annual_rate * RP)^xi - 1))
  } else {
    q <- (u + sigma * log(annual_rate * RP))
  }
  q <- pmax(q, 0)
  return(q)
}
#quantile_market <- function(RP, u, sigma, xi, lambda_eff, p_u) {
#  annual_rate <- lambda_eff * p_u  # 年間の大口事故発生頻度
#  if (abs(xi) > 1e-6) {
#    return(u + (sigma/xi)*((annual_rate * RP)^xi - 1))
#  } else {
#    return(u + sigma * log(annual_rate * RP))
#  }
#}

RP_market <- seq(1, 1000000, by = 1)
sigma_market <- gpd_fit_market$par.ests["beta"]
xi_market    <- gpd_fit_market$par.ests["xi"]

risk_curve_market <- data.frame(
  ReturnPeriod = RP_market,
  Loss = sapply(RP_market, quantile_market, u = u_market, sigma = sigma_market,
                xi = xi_market, lambda_eff = lambda_effective, p_u = p_u_market)
)
RP_market_max <- risk_curve_market %>% 
  filter(Loss > max(loss_market))
freq_market_max <- 1 / RP_market_max[1,1]

# ===============================
# 市場データのリスクカーブ
# ===============================
p_market <- ggplot(risk_curve_market, aes(x = ReturnPeriod, y = Loss)) +
  geom_line(color = "blue", size = 1) +
  labs(title = "倉庫火災リスクカーブ（市場ロスデータ）",
       x = "再現期間 (年)",
       y = "損害額（百万円）") +
  theme_minimal()
print(p_market)


# ===============================
# 実績ロスデータの閾値探索（MEPプロット）
# ===============================
#meplot(df_clm$LOSS)

# 閾値
u_actual <- 1.8*10^7

# ===============================
# 閾値 u_actual 以降の実績ロスデータに対して対数正規分布フィッティング
# ===============================
loss_actual_excess <- loss_actual[loss_actual > u_actual]

# 対数正規分布フィッティング（fitdistrplus パッケージを利用）
fit_lnorm_actual <- fitdist(loss_actual_excess, "lnorm")
print(fit_lnorm_actual)

# ===============================
# 10. フィッティング検定（QQプロット等）
# ===============================
# QQプロット
qqcomp(fit_lnorm_actual, main = "実績ロスデータ QQプロット")
plot(fit_lnorm_actual)

par(mfrow = c(2, 2), mar = c(4, 4, 2, 1))
fw <- fitdist(loss_actual_excess, "weibull")
fln <- fitdist(loss_actual_excess, "lnorm")
fga <- fitdist(loss_actual_excess, "gamma")
fp <- fitdist(loss_actual_excess, "pareto", start = list(shape = 10, scale = 10), 
              lower = 2+1e-6, upper = Inf)
fgum <- fitdist(loss_actual_excess, "gumbel")

plot.legend <- c("Weibull", "lognormal","gamma", "pareto", "gumbel")
denscomp(list(fw, fln, fga, fp, fgum), legendtext = plot.legend)
qqcomp(list(fw, fln, fga, fp, fgum), legendtext = plot.legend)
cdfcomp(list(fw, fln, fga, fp, fgum), legendtext = plot.legend)
ppcomp(list(fw, fln, fga, fp, fgum), legendtext = plot.legend)
gofstat(list(fw, fln, fga, fp, fgum), fitnames=c("Weibull", "lognormal","gamma", "pareto", "gumbel"))

# ===============================
# 実績ロスのシナリオとのブレンド
# ===============================
scenario_PML <- max(loss_market) * 10^6  # 単位：円 ※適宜設定してください
exceedance_prob <- freq_market_max # GPD fittingから参照　最大値のRP

# フィットした分布からの推定値を取得
estimated_loss <- qlnorm(1 - exceedance_prob, meanlog = fit_lnorm_actual$estimate["meanlog"], sdlog = fit_lnorm_actual$estimate["sdlog"])

# 目的関数を定義（推定値と市場データの差の二乗和を最小化）
objective_function <- function(params) {
  meanlog_adj <- params[1]
  sdlog_adj <- params[2]
  estimated_loss <- qlnorm(1 - exceedance_prob, meanlog = meanlog_adj, sdlog = sdlog_adj)
  return((estimated_loss - scenario_PML)^2)
}

# 最適化の初期値を設定
initial_params <- as.list(fit_lnorm_actual$estimate)
initial_values <- c(initial_params$meanlog, initial_params$sdlog)

# 最適化の実行
optim_result <- optim(par = initial_values, fn = objective_function)

# 調整済みパラメータの取得
meanlog_adj <- optim_result$par[1]
sdlog_adj <- optim_result$par[2]

# リスクカーブの作成
# 再現期間と対応する超過確率を計算
return_periods <- seq(1, 1000000, by = 1)
exceedance_probs <- 1 / return_periods

# 調整済み分布から損害額を推定
loss_estimates <- qlnorm(1 - exceedance_probs, meanlog = meanlog_adj, sdlog = sdlog_adj)

# リスクカーブのデータフレームを作成
risk_curve <- data.frame(
  ReturnPeriod = return_periods,
  LossAmount = loss_estimates
)
PML_200 <- risk_curve[risk_curve$ReturnPeriod == 200,2]
scenario_RP <- round(1 / exceedance_prob, 0)
PML_scenario <- risk_curve[risk_curve$ReturnPeriod == round(1 / exceedance_prob, 0),2]


# リスクカーブのプロット
ggplot(risk_curve, aes(x = ReturnPeriod, y = LossAmount/10^6)) +
  geom_line(color = "blue") +
  geom_point(data = data.frame(ReturnPeriod = scenario_RP, LossAmount = scenario_PML), 
             aes(x = ReturnPeriod, y = LossAmount/10^6), color = "red", size = 3) +
  geom_text(data = data.frame(ReturnPeriod = scenario_RP, LossAmount = PML_scenario), 
            aes(label = scales::comma(PML_scenario/10^6)), vjust = -1, size = 3) +
  geom_point(data = data.frame(ReturnPeriod = 200, LossAmount = PML_200), 
             aes(x = ReturnPeriod, y = LossAmount/10^6), color = "red", size = 3) +
  geom_text(data = data.frame(ReturnPeriod = 200, LossAmount = PML_200), 
            aes(label = scales::comma(PML_200/10^6)), vjust = -1, size = 3) +
  scale_x_continuous(labels = scales::comma) +
  scale_y_continuous(labels = scales::comma) +
  labs(title = graph_title,
       x = "再現期間（年）",
       y = "損害額（百万円）") +
  theme_minimal()

# 損害額 10億円 = 1e9 円の場合の再現期間
loss_target <- 10e9
RP_for_target <- 1/((1 - plnorm(loss_target, meanlog = meanlog_adj, sdlog = sdlog_adj)))
cat("【ブレンドモデル】損害額 10億円 の再現期間:", RP_for_target, "年\n")
cat("シナリオRP:", scenario_RP, "年")

cat("【ブレンドモデル】損害額 10億円 のVaR:", 1-1/RP_for_target)


# TVaR
# LogNorm u and sigma
cat("u:", meanlog_adj, "
sigma:", sdlog_adj)
TVatRLnorm(kap = 0.95, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.99, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.995, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8

TVatRLnorm(kap = 0.9721598, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.9931179, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.9973235, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.9992891, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.999908, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8

VatRLnorm(kap = 0.95, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
VatRLnorm(kap = 0.99, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
VatRLnorm(kap = 0.995, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8

# 全物件・全件・推定損害額２
TVatRLnorm(kap = 0.94292760, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.98335200, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.99284610, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.99783990, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8
TVatRLnorm(kap = 0.99966610, meanlog = meanlog_adj, sdlog = sdlog_adj)/10^8

TVatRLnorm(kap = 0, meanlog = meanlog_adj, sdlog = sdlog_adj)




