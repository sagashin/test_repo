#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
excel_formula_map_final.py
-------------------------------------------------------------
Excel ブックの数式依存関係を抽出し、PyVis で HTML マインドマップを生成
-------------------------------------------------------------
ターミナル例:
    python excel_formula_map_final.py MyBook.xlsx Summary!B2 --radial

Jupyter 例:
    %run excel_formula_map_final.py -- MyBook.xlsx Summary!B2
-------------------------------------------------------------
"""

import re
import sys
import json
import argparse
from pathlib import Path
from typing import Optional

import openpyxl
import networkx as nx
from pyvis.network import Network


# ------------------------ 引数 ------------------------
def parse_args() -> argparse.Namespace:
    p = argparse.ArgumentParser(
        description="Excel formula dependency mapper (final edition)"
    )
    p.add_argument("xlsx", help=".xlsx file path")
    p.add_argument("root", nargs="?", default="",
                   help="Root node (e.g. Sheet1!B2). Auto-detect if omitted")
    p.add_argument("--out", default="excel_formula_map.html",
                   help="Output HTML file name")
    p.add_argument("--radial", action="store_true",
                   help="Use radial (LR) instead of top-down (UD) layout")
    args, _ = p.parse_known_args()   # Jupyter の -f を無視
    return args


# -------------------- ユーティリティ --------------------
REF = re.compile(
    r"(?:'([^']+)'|([A-Za-z0-9_]+))?!?\$?[A-Z]{1,3}\$?[0-9]{1,7}", re.I
)


def clean_ref(s: str) -> str:
    """' と $ を削り 'Sheet'!$A$1 → Sheet!A1"""
    s = s.replace("$", "")
    return s[1:-1] if s.startswith("'") and s.endswith("'") else s


# ---------------- Excel → networkx ----------------
def build_graph(xlsx_path: Path) -> nx.DiGraph:
    try:
        wb = openpyxl.load_workbook(xlsx_path, data_only=False)
    except Exception as e:
        sys.exit(f"[ERROR] openpyxl でブックを開けません: {e}")

    G = nx.DiGraph()
    for ws in wb.worksheets:
        for row in ws.iter_rows(values_only=False):
            for cell in row:
                if cell and cell.data_type == "f":
                    src = clean_ref(f"{ws.title}!{cell.coordinate}")
                    for m in REF.finditer(cell.value or ""):
                        sheet = m.group(1) or m.group(2) or ws.title
                        tgt = clean_ref(f"{sheet}!{m.group(0).split('!')[-1]}")
                        G.add_edge(src, tgt)

    if G.number_of_nodes() == 0:
        sys.exit("[ERROR] 数式セルが見つかりません。")

    return G


# -------------- PyVis レイアウト設定 ----------------
def set_hierarchical(net: Network, radial: bool) -> None:
    """PyVis の階層レイアウトをバージョンに合わせて適用"""
    if hasattr(net, "hierarchical_layout"):          # PyVis ≥ 0.3.2
        net.hierarchical_layout(
            direction="LR" if radial else "UD",
            sort_method="hubsize" if radial else "directed",
            centralize=False,
        )
    else:                                            # フォールバック
        opts = {
            "layout": {
                "hierarchical": {
                    "enabled": True,
                    "direction": "LR" if radial else "UD",
                    "sortMethod": "hubsize" if radial else "directed",
                    "nodeSpacing": 120,
                    "levelSeparation": 150,
                }
            }
        }
        net.set_options(json.dumps(opts))


def highlight_root(net: Network, root: str,
                   bg: str = "#FFCC00", border: str = "#FF9900") -> None:
    """root ノードを着色。PyVis バージョン差異を吸収"""
    # 新 API (≥0.3.0)
    if hasattr(net, "get_node"):
        node = net.get_node(root)
        if node:
            node["color"] = {"background": bg, "border": border}
            return
    # 旧 API 向けフォールバック
    for n in net.nodes:
        if n.get("id") == root:
            n["color"] = {"background": bg, "border": border}
            break


# -------------------- 可視化 --------------------
def visualize(G: nx.DiGraph, root: str, out_path: Path, radial: bool) -> None:
    net = Network(height="750px", width="100%", directed=True, bgcolor="#FFFFFF")

    # networkx からインポート
    try:
        net.from_nx(G)
    except Exception as e:
        sys.exit(f"[ERROR] PyVis へのグラフ取り込みで失敗: {e}")

    # レイアウト・style
    set_hierarchical(net, radial)

    for n in net.nodes:
        deg = G.degree(n["id"])
        n["title"] = f"{n['id']}<br>degree: {deg}"
        n["value"] = deg + 1

    highlight_root(net, root)

    # save_graph は必ず存在し、戻り値も使わないので NoneType 例外は出ない
    try:
        net.save_graph(str(out_path))
    except Exception as e:
        sys.exit(f"[ERROR] HTML 書き込みに失敗: {e}")

    # ブラウザは任意: headless 環境で open できなくても HTML は残る
    try:
        net.show(str(out_path))
    except Exception:
        # 失敗しても無視（HTML は生成済み）
        pass

    print("[INFO] ✅ HTML saved to:", out_path.resolve())


# ---------------------- main ----------------------
def main() -> None:
    args = parse_args()

    xlsx = Path(args.xlsx).expanduser()
    if not xlsx.is_file():
        sys.exit(f"[ERROR] ファイルが見つかりません: {xlsx}")

    G = build_graph(xlsx)

    root = clean_ref(args.root)
    if not root or root not in G:
        root = max(G.in_degree, key=lambda x: x[1])[0]
        print(f"[INFO] Root auto-selected: {root}")

    visualize(G, root, Path(args.out), args.radial)


if __name__ == "__main__":
    main()