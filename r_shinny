library(shiny)
library(shinyWidgets) # プログレスバー用
library(readxl)
library(tidyverse)
library(tidyr)
library(data.table)
library(writexl)
library(DBI)
library(odbc)
library(stringr)

ui <- fluidPage(
  titlePanel("計算アプリ"),
  sidebarLayout(
    sidebarPanel(
      textInput("working_dir", "作業ディレクトリを入力してください", value = getwd()),
      textInput("output_filename", "出力ファイル名を入力してください", value = "output.xlsx"),
      actionButton("execute", "計算を実行")
    ),
    mainPanel(
      h4("使用しているSQLサーバーとデータベース:"),
      verbatimTextOutput("sql_info"),
      h4("使用している相関行列ファイル:"),
      verbatimTextOutput("corr_matrix_file"),
      h4("進行状況:"),
      progressBar(id = "progress", value = 0, total = 100, display_pct = TRUE),
      h4("メッセージ:"),
      verbatimTextOutput("message")
    )
  )
)

server <- function(input, output, session) {
  # SQLサーバーとデータベースを表示
  output$sql_info <- renderText({
    paste("サーバー: DWAWDB245401,60101\nデータベース: ICMDEV_5_3_JAPAN")
  })

  # 相関行列ファイルを表示
  output$corr_matrix_file <- renderText({
    "Correlation_Matrix.csv"
  })

  # メッセージ表示用
  output$message <- renderText({ "" })

  # ボタンがクリックされたときの処理
  observeEvent(input$execute, {
    # メッセージをリセット
    output$message <- renderText({ "" })

    # 作業ディレクトリの確認
    if (!dir.exists(input$working_dir)) {
      output$message <- renderText({ "エラー: 作業ディレクトリが存在しません。" })
      return()
    }

    # 作業ディレクトリの設定
    setwd(input$working_dir)

    # 出力ファイル名の確認
    if (input$output_filename == "") {
      output$message <- renderText({ "エラー: 出力ファイル名を入力してください。" })
      return()
    }

    output_filename <- input$output_filename

    # 計算とファイル出力を試行
 




library(shiny)
library(readxl)
library(tidyverse)
library(tidyr)
library(data.table)
library(writexl)
library(DBI)
library(odbc)
library(writexl)
library(stringr)

ui <- fluidPage(
  titlePanel("計算アプリ"),
  sidebarLayout(
    sidebarPanel(
      textInput("working_dir", "作業ディレクトリを入力してください", value = getwd()),
      textInput("output_filename", "出力ファイル名を入力してください", value = "output.xlsx"),
      actionButton("execute", "計算を実行")
    ),
    mainPanel(
      h4("使用しているSQLサーバーとデータベース:"),
      verbatimTextOutput("sql_info"),
      h4("使用している相関行列ファイル:"),
      verbatimTextOutput("corr_matrix_file"),
      h4("メッセージ:"),
      verbatimTextOutput("message")
    )
  )
)

server <- function(input, output, session) {

  # SQLサーバーとデータベースを表示
  output$sql_info <- renderText({
    paste("サーバー: DWAWDB245401,60101\nデータベース: ICMDEV_5_3_JAPAN")
  })

  # 相関行列ファイルを表示
  output$corr_matrix_file <- renderText({
    "Correlation_Matrix.csv"
  })

  # メッセージ表示用
  output$message <- renderText({ "" })

  # ボタンがクリックされたときの処理
  observeEvent(input$execute, {
    # メッセージをリセット
    output$message <- renderText({ "" })

    # 作業ディレクトリの確認
    if (!dir.exists(input$working_dir)) {
      output$message <- renderText({ "エラー: 作業ディレクトリが存在しません。" })
      return()
    }

    # 作業ディレクトリの設定
    setwd(input$working_dir)

    # 出力ファイル名の確認
    if (input$output_filename == "") {
      output$message <- renderText({ "エラー: 出力ファイル名を入力してください。" })
      return()
    }

    output_filename <- input$output_filename

    # 計算とファイル出力を試行
    tryCatch({
      # データベース接続とクエリ実行を関数化
      execute_query <- function(con, query) {
        dbGetQuery(con, query)
      }

      # データベース接続
      con <- dbConnect(odbc(),
                       Driver = "SQL Server",
                       Server = "DWAWDB245401,60101",
                       Database = "ICMDEV_5_3_JAPAN",
                       Trusted_Connection = "Yes")

      # SQLクエリ
      queries <- list(
        capital = "SELECT [RunID],[Group],[Allocation],[Entity],[RiskLevel],[Risk],[Value] 
                   FROM [ICM].[Outputs_Capital_GroupAllocationByEntityRisk] 
                   WHERE Allocation IN ('Standalone VaR','Standalone TVaR','One-Year Co-TVaR')",

        opr_oth = "SELECT * FROM [ICM].[Global_UserDefinedDistns_Names$DIM] a 
                   INNER JOIN [ICM].[Global_UserDefinedDistns_Parameters$DATA] b 
                   ON a.ID = b.Global_UserDefinedDistns_Names$ID",

        data_group_versions = "SELECT [Version], [RunID], [DataGroupID] 
                               FROM [ICMDEV_5_3_JAPAN].[WTW].[DATAGROUP_VERSIONS]",

        cat = "SELECT * FROM [ICM].[Outputs_Cat] WHERE OriginPeriodBasis = 'Accident'"
      )

      # クエリ結果の取得
      df_list <- lapply(queries, execute_query, con = con)

      # データベース接続をクローズ
      dbDisconnect(con)

      # 各データフレームに名前を付ける
      df_capital <- df_list$capital
      df_opr_oth <- df_list$opr_oth
      df_data_group_versions <- df_list$data_group_versions
      df_cat <- df_list$cat

      df_corr_matrix <- read.csv("Correlation_Matrix.csv")

      df_cat$RunID <- as.numeric(df_cat$RunID)
      df_cat2 <- df_cat %>% 
        filter(RunID > 10300 & 
                 Class == "Total Insurance" & 
                 OriginPeriodBasis == "Accident" & 
                 Stat == "P99.5" ) %>% 
        mutate(Group = "AJH", Allocation = "Standalone VaR") %>% 
        rename(RiskLevel = Peril, Risk = Category) %>% 
        dplyr::select(RunID, Group, Allocation, Entity, RiskLevel, Risk, Value)
      df_cat2$Value <- as.numeric(df_cat2$Value)

      df_data_group_versions <- df_data_group_versions %>% 
        filter(DataGroupID == 3)

      colnames(df_opr_oth)[5] <- "Version2"
      colnames(df_opr_oth)[9] <- "Value2"

      df_merge <- merge(x = df_opr_oth, y = df_data_group_versions, by.x = "Version", by.y = "Version", all.x = T) 

      df_merge2 <- df_merge %>% mutate(paramID = str_sub(`Const_Ins_UDParams$ID`, start = -1, end = -1)) %>% 
        filter(RunID > 10300 & paramID == 1 & Version == Version2 & Position != 10) %>% 
        dplyr::select(RunID, ID, Position, Value, Value2) %>% 
        arrange(RunID, Position)

      df_merge3 <- df_merge2 %>% mutate(
        Entity = str_sub(Value, start = -3, end = -1),
        Group = "AJH",
        Allocation = "Standalone VaR",
        RiskLevel = "5"
                    ) %>% 
        rename(Risk = Value, Value =Value2) %>% 
        dplyr::select(RunID, Group, Allocation, Entity, RiskLevel, Risk, Value) %>% 
        filter(Entity != "isk" & Entity != "sks")
      df_merge3$Entity[df_merge3$Entity == "npo"] <- "Sonpo"
      df_merge3$Entity[df_merge3$Entity == "AJH"] <- "Total"
      df_merge3$Value <- as.numeric(df_merge3$Value)

      # Outputs_Capital_GroupAllocationByEntityRisk
      df2 <- df_capital %>% 
        filter(
          RunID > 10300 & 
          Allocation == "Standalone VaR" &
          ((Risk == "Insurance Risk" & RiskLevel == 4) | 
             Risk == "Premium Risk Non-Cat" | 
             (Risk == "Reserve Risk" & RiskLevel == 3) |       
            (Risk == "Catastrophe Risk" & RiskLevel == 2) |
             (Risk == "Credit Risk - RI Default" & RiskLevel == 3) |
             (Risk == "Market Risk" & RiskLevel == 4) |
             (Risk == "Interest Rate" & RiskLevel == 1) |
             (Risk == "Equity" & RiskLevel == 1) |
             (Risk == "Spread" & RiskLevel == 1) |
             (Risk == "Credit" & RiskLevel == 1) |
             (Risk == "Non-Insurance Currency Risk" & RiskLevel == 1) |
             (Risk == "Liquidity Risk" & RiskLevel == 1) |
             (Risk == "Tax" & RiskLevel == 1) |
             (Risk == "Total" & RiskLevel == 5) 
           )
                 )

      # データの統合
      df2$RunID <- as.character(df2$RunID)
      df_merge3$RunID <- as.character(df_merge3$RunID)

      df3 <- rbind(df2, df_merge3)

      # TCRの計算
      df_agg <- df3 %>% 
        filter(RunID > 10300 & (Risk == "Total" | str_detect(Risk,"Operational Risk") | str_detect(Risk,"Other")))
      df_agg$RunID <- as.character(df_agg$RunID)

      # RunIDごとにTotal Capital Requirementを計算
      calc_tcr <- function(runid, entity) {
        df_runid <- df_agg %>% 
          filter(RunID == runid & Entity == entity)
        TCR <- sqrt(t(df_runid$Value) %*% as.matrix(df_corr_matrix[,-1]) %*% df_runid$Value)
        df_tcr <- data.frame(RunID = runid, 
                             Group = "AJH",
                             Allocation = "Standalone VaR",
                             Entity = entity, 
                             RiskLevel = "6",
                             Risk = "Total Capital Requirement",
                             Value = TCR)
        return(df_tcr)
      }

      df_tcr_list <- list()
      count <- 1
      for (i in unique(df_agg$RunID)) {
        for (j in unique(df_agg$Entity)) {

            skip_to_next <- FALSE
            tryCatch({
              tcr <- calc_tcr(i, j)
              df_tcr_list[[count]] <- tcr
              count <- count +1
            }, error = function(e) {
              skip_to_next <- TRUE
            })
            if(skip_to_next) {next}
        }
      }
      df_tcr <- do.call(rbind, df_tcr_list)

      df_with_tcr <- rbind(df3, df_tcr)
      df_with_tcr_cat <- rbind(df_with_tcr, df_cat2)

      # データをワイド形式に変換
      df_wide <- pivot_wider(df_with_tcr_cat,
                               names_from = RunID,
                               values_from = Value)

      # ファイルパスの作成
      output_filepath <- file.path(input$working_dir, output_filename)

      # 結果をExcelファイルに書き込み
      write_xlsx(df_wide, output_filepath)

      # 成功メッセージ
      output$message <- renderText({ "計算が完了し、ファイルが保存されました。" })

    }, error = function(e) {
      # エラーメッセージを表示
      output$message <- renderText({ paste("エラーが発生しました:", e$message) })
    })
  })
}

shinyApp(ui = ui, server = server)
