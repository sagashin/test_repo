############################################################
# excel_formula_map_bfs.R
# 1) Excel 数式セルを解析して依存グラフ構築
# 2) root から N 階層以内を抽出 (max_depth)
# 3) bfs で単親ツリーを作成 → circlepack か FR で可視化
############################################################
run_map <- function(file,
                    root         = "",
                    max_depth    = NULL,   # NULL なら制限なし
                    use_circle   = TRUE) { # FALSE なら FR レイアウト
  
  ##### 0. 必要パッケージ ----
  pkgs <- c("tidyxl","dplyr","stringr","tidyr",
            "igraph","ggraph")
  new  <- pkgs[!pkgs %in% installed.packages()[,"Package"]]
  if(length(new)) install.packages(new, quiet = TRUE)
  lapply(pkgs, library, character.only = TRUE)
  
  ##### 1. ユーティリティ ----
  ref_pat   <- "('([^']+)'|[A-Za-z0-9_]+)?!?\\$?[A-Z]{1,3}\\$?[0-9]{1,7}"
  clean_ref <- function(x){
    x <- gsub("\\$", "", x)
    gsub("^'(.*)'$", "\\1", x)
  }
  
  ##### 2. Excel → エッジ抽出 ----
  cells <- xlsx_cells(file) |>
           filter(!is_blank, !is.na(formula))
  if(nrow(cells)==0) stop("数式セルが見つかりません。")
  
  edges <- cells |>
    rowwise() |>
    mutate(refs = list(stringr::str_extract_all(
             formula, regex(ref_pat, ignore_case = TRUE))[[1]])) |>
    tidyr::unnest_longer(refs) |>
    mutate(
      src = clean_ref(paste0(sheet,"!",address)),
      tgt_raw = clean_ref(refs),
      tgt = if_else(stringr::str_detect(tgt_raw,"!"), tgt_raw,
                    paste0(sheet,"!",tgt_raw))
    ) |>
    distinct(src, tgt) |>
    select(from = src, to = tgt)
  
  g <- igraph::graph_from_data_frame(edges, directed = TRUE)
  
  ##### 3. root 決定 ----
  if(root=="" || !(root %in% igraph::V(g)$name)){
    root <- names(sort(igraph::degree(g, mode="in"), decreasing = TRUE))[1]
    message("root auto-selected: ", root)
  }
  
  ##### 4. 深さ制限 ----
  if(!is.null(max_depth)){
    dist <- igraph::distances(g, v = root, mode = "out")[1, ]
    keep <- names(dist[!is.infinite(dist) & dist <= max_depth])
    g    <- igraph::induced_subgraph(g, vids = keep)
    message("Depth ≤", max_depth, ": ", igraph::vcount(g),
            " nodes / ", igraph::ecount(g), " edges")
  }
  
  ##### 5. bfs で擬似木 (circlepack 用) ----
  if(use_circle){
    bfs <- igraph::bfs(g, root      = root,
                          mode      = "out",
                          father    = TRUE,
                          unreachable = FALSE)
    idx_child  <- which(!is.na(bfs$father))
    tree_edges <- data.frame(
      from = igraph::V(g)$name[bfs$father[idx_child]],
      to   = igraph::V(g)$name[idx_child]
    )
    g_tree <- igraph::graph_from_data_frame(
                tree_edges, directed = TRUE,
                vertices = data.frame(name = igraph::V(g)$name))
    leaf_wt <- ifelse(igraph::degree(g_tree, mode="out")==0, 1, NA)
  }
  
  ##### 6. 可視化 ----
  library(ggraph)
  
  if(use_circle){
    p <- ggraph(g_tree, layout = "circlepack", weight = leaf_wt) +
         geom_edge_diagonal(alpha=.3) +
         geom_node_text(aes(label = name), repel = TRUE, size = 3) +
         theme_void()
  } else {
    p <- ggraph(g, layout = "fr") +
         geom_edge_link(alpha=.3,
                        arrow = arrow(length = unit(3,"mm"))) +
         geom_node_point() +
         geom_node_text(aes(label = name), repel = TRUE, size = 3) +
         theme_void()
  }
  
  print(p)
}

############################################################
# --- 実行例 ------------------------------------------------
# source("excel_formula_map_bfs.R")
# run_map("Book.xlsx", root = "Summary!B2", max_depth = 2, use_circle = TRUE)
############################################################